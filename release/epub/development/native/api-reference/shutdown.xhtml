<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>autolabor::pm1::shutdown</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="autolabor-pm1-shutdown">
<h1>autolabor::pm1::shutdown</h1>
<p>声明于头文件 <a class="reference external" href="https://github.com/autolaborcenter/pm1_sdk/blob/master/src/main/pm1_sdk.h"><code class="docutils literal notranslate"><span class="pre">pm1_sdk.h</span></code></a><span class="link-target"> [https://github.com/autolaborcenter/pm1_sdk/blob/master/src/main/pm1_sdk.h]</span></p>
<hr class="docutils" />
<div class="highlight-c++ notranslate"><div class="highlight"><pre><span></span><span class="n">autolabor</span><span class="o">::</span><span class="n">pm1</span><span class="o">::</span><span class="n">result</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> 
<span class="n">autolabor</span><span class="o">::</span><span class="n">pm1</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
</pre></div>
</div>
<hr class="docutils" />
<p>关闭与机器人底盘的串口连接。</p>
</div>
<div class="section" id="id1">
<h1>参数</h1>
<p>（无）</p>
</div>
<div class="section" id="id2">
<h1>返回值</h1>
<p>若关闭失败，<code class="docutils literal notranslate"><span class="pre">result.error_info</span></code> 保存错误信息。</p>
</div>
<div class="section" id="id3">
<h1>注意</h1>
<p>为了保证资源的安全性，<code class="docutils literal notranslate"><span class="pre">initialize</span></code> 与 <code class="docutils literal notranslate"><span class="pre">shutdown</span></code> 通过互斥锁保护，多线程调用时将阻塞，按获得锁的顺序依次执行。这两个函数执行期间，对其他任何引发机器人动作或查询机器人状态的 SDK 函数的调用将直接失败并立即返回。</p>
</div>
<div class="section" id="id4">
<h1>示例</h1>
<p>下面一段代码先调用 <code class="docutils literal notranslate"><span class="pre">initialize()</span></code> 连接到机器人底盘，1 秒后调用 <code class="docutils literal notranslate"><span class="pre">shutdown()</span></code> 释放连接。另有一个分离的线程间隔 0.1s 打印左轮控制器的状态，建立连接前及断开连接后，打印 <code class="docutils literal notranslate"><span class="pre">0</span></code>，表示状态未知；连接时打印 1（正常） 或 255（锁定）：</p>
<div class="highlight-c++ notranslate"><div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;pm1_sdk.h&quot;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">using</span> <span class="k">namespace</span> <span class="n">autolabor</span><span class="o">::</span><span class="n">pm1</span><span class="p">;</span>
    
	<span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([]</span> <span class="p">{</span>
		<span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">check_state</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
			<span class="n">delay</span><span class="p">(</span><span class="mf">0.1</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}).</span><span class="n">detach</span><span class="p">();</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">initialize</span><span class="p">())</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">shutdown</span><span class="p">();</span>
	<span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>